[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName="")]
public static class ModuleInitializer
{
    public static void Initialize() { }
}
namespace Orc.Csv
{
    public class BooleanConverter : Orc.Csv.TypeConverterBase
    {
        public BooleanConverter() { }
        public BooleanConverter(string[]? trueValues) { }
        public Orc.Csv.BooleanConverter AddTrueValues(params string[] values) { }
        public override object ConvertFromString(string? text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData? memberMapData) { }
    }
    public abstract class ClassMapBase<TRecord> : CsvHelper.Configuration.ClassMap<TRecord>
    {
        protected ClassMapBase() { }
    }
    public static class ClassMapExtensions
    {
        public static System.Type GetRecordType(this CsvHelper.Configuration.ClassMap classMap) { }
    }
    public class CsvContext : Orc.Csv.ICsvContext
    {
        public CsvContext(System.Type recordType) { }
        public CsvHelper.Configuration.ClassMap? ClassMap { get; set; }
        public CsvHelper.Configuration.CsvConfiguration? Configuration { get; set; }
        public System.Globalization.CultureInfo? Culture { get; set; }
        public System.Action<object>? Initializer { get; set; }
        public System.Type RecordType { get; set; }
        public bool ThrowOnError { get; set; }
    }
    public class CsvContext<TRecord> : Orc.Csv.CsvContext
    {
        public CsvContext() { }
    }
    public class CsvContext<TRecord, TMap> : Orc.Csv.CsvContext<TRecord>
        where TMap : CsvHelper.Configuration.ClassMap, new ()
    {
        public CsvContext() { }
    }
    public static class CsvEnvironment
    {
        public static readonly System.Globalization.CultureInfo DefaultCultureInfo;
        public static readonly System.DateTime ExcelNullDate;
    }
    public class CsvReaderService : Orc.Csv.CsvServiceBase, Orc.Csv.ICsvReaderService
    {
        public CsvReaderService() { }
        public CsvHelper.CsvReader CreateReader(System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext) { }
        protected virtual System.Collections.IEnumerable ReadData(CsvHelper.CsvReader csvReader, Orc.Csv.ICsvContext csvContext) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.IEnumerable> ReadDataAsync(CsvHelper.CsvReader csvReader, Orc.Csv.ICsvContext csvContext) { }
        protected virtual object? ReadRecord(CsvHelper.CsvReader csvReader, System.Type recordType, Orc.Csv.ICsvContext csvContext) { }
        public virtual System.Collections.IEnumerable ReadRecords(System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext) { }
        public System.Threading.Tasks.Task<System.Collections.IEnumerable> ReadRecordsAsync(System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext) { }
    }
    public abstract class CsvServiceBase
    {
        protected CsvServiceBase() { }
        public virtual CsvHelper.Configuration.CsvConfiguration CreateDefaultConfiguration(Orc.Csv.ICsvContext csvContext) { }
        protected virtual CsvHelper.Configuration.CsvConfiguration EnsureCorrectConfiguration(CsvHelper.Configuration.CsvConfiguration? configuration, Orc.Csv.ICsvContext csvContext) { }
    }
    public class CsvWriterService : Orc.Csv.CsvServiceBase, Orc.Csv.ICsvWriterService
    {
        public CsvWriterService() { }
        public virtual CsvHelper.CsvWriter CreateWriter(System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext csvContext) { }
        protected virtual void WriteRecords(System.Collections.IEnumerable records, CsvHelper.CsvWriter csvWriter, Orc.Csv.ICsvContext csvContext) { }
        public virtual void WriteRecords(System.Collections.IEnumerable records, System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext csvContext) { }
        public virtual System.Threading.Tasks.Task WriteRecordsAsync(System.Collections.IEnumerable records, System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext csvContext) { }
    }
    public class DynamicTypeConverter<T> : CsvHelper.TypeConversion.ITypeConverter
    {
        public DynamicTypeConverter(System.Func<string?, CsvHelper.IReaderRow?, CsvHelper.Configuration.MemberMapData, T?> convertFromString, System.Func<object?, CsvHelper.IWriterRow, CsvHelper.Configuration.MemberMapData, string?> convertToString, string? defaultValue = null) { }
        public object? ConvertFromString(string? text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) { }
        public string? ConvertToString(object? value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) { }
    }
    public class EnumConverter<T> : Orc.Csv.TypeConverterBase
        where T :  struct, System.IComparable, System.IFormattable
    {
        public EnumConverter() { }
        public EnumConverter(T defaultValue) { }
        public T DefaultValue { get; set; }
        public override object? ConvertFromString(string? text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) { }
    }
    public interface ICsvContext
    {
        CsvHelper.Configuration.ClassMap? ClassMap { get; set; }
        CsvHelper.Configuration.CsvConfiguration? Configuration { get; set; }
        System.Globalization.CultureInfo? Culture { get; set; }
        System.Action<object>? Initializer { get; set; }
        System.Type RecordType { get; set; }
        bool ThrowOnError { get; set; }
    }
    public interface ICsvReaderService
    {
        CsvHelper.Configuration.CsvConfiguration CreateDefaultConfiguration(Orc.Csv.ICsvContext csvContext);
        CsvHelper.CsvReader CreateReader(System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext);
        System.Collections.IEnumerable ReadRecords(System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext);
        System.Threading.Tasks.Task<System.Collections.IEnumerable> ReadRecordsAsync(System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext);
    }
    public static class ICsvReaderServiceExtensions
    {
        public static CsvHelper.CsvReader CreateReader(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static System.Collections.IEnumerable ReadRecords(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static System.Collections.Generic.List<TRecord> ReadRecords<TRecord>(this Orc.Csv.ICsvReaderService csvReaderService, System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext) { }
        public static System.Collections.Generic.List<TRecord> ReadRecords<TRecord>(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static System.Collections.Generic.List<TRecord> ReadRecords<TRecord, TRecordMap>(this Orc.Csv.ICsvReaderService csvReaderService, System.IO.StreamReader streamReader, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
        public static System.Collections.Generic.List<TRecord> ReadRecords<TRecord, TRecordMap>(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
        public static System.Threading.Tasks.Task<System.Collections.IEnumerable> ReadRecordsAsync(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<TRecord>> ReadRecordsAsync<TRecord>(this Orc.Csv.ICsvReaderService csvReaderService, System.IO.StreamReader streamReader, Orc.Csv.ICsvContext csvContext) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<TRecord>> ReadRecordsAsync<TRecord>(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<TRecord>> ReadRecordsAsync<TRecord, TRecordMap>(this Orc.Csv.ICsvReaderService csvReaderService, System.IO.StreamReader streamReader, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<TRecord>> ReadRecordsAsync<TRecord, TRecordMap>(this Orc.Csv.ICsvReaderService csvReaderService, string fileName, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
    }
    public interface ICsvWriterService
    {
        CsvHelper.Configuration.CsvConfiguration CreateDefaultConfiguration(Orc.Csv.ICsvContext csvContext);
        CsvHelper.CsvWriter CreateWriter(System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext csvContext);
        void WriteRecords(System.Collections.IEnumerable records, System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext csvContext);
        System.Threading.Tasks.Task WriteRecordsAsync(System.Collections.IEnumerable records, System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext csvContext);
    }
    public static class ICsvWriterServiceExtensions
    {
        public static CsvHelper.CsvWriter CreateWriter(this Orc.Csv.ICsvWriterService csvWriterService, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static void WriteRecords(this Orc.Csv.ICsvWriterService csvWriterService, System.Collections.IEnumerable records, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static void WriteRecords<TRecord, TRecordMap>(this Orc.Csv.ICsvWriterService csvWriterService, System.Collections.Generic.IEnumerable<TRecord> records, System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
        public static void WriteRecords<TRecord, TRecordMap>(this Orc.Csv.ICsvWriterService csvWriterService, System.Collections.Generic.IEnumerable<TRecord> records, string fileName, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
        public static System.Threading.Tasks.Task WriteRecordsAsync(this Orc.Csv.ICsvWriterService csvWriterService, System.Collections.IEnumerable records, string fileName, Orc.Csv.ICsvContext csvContext) { }
        public static System.Threading.Tasks.Task WriteRecordsAsync<TRecord, TRecordMap>(this Orc.Csv.ICsvWriterService csvWriterService, System.Collections.Generic.IEnumerable<TRecord> records, System.IO.StreamWriter streamWriter, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
        public static System.Threading.Tasks.Task WriteRecordsAsync<TRecord, TRecordMap>(this Orc.Csv.ICsvWriterService csvWriterService, System.Collections.Generic.IEnumerable<TRecord> records, string fileName, Orc.Csv.ICsvContext? csvContext = null)
            where TRecordMap : CsvHelper.Configuration.ClassMap, new () { }
    }
    public static class MemberMapExtensions
    {
        public static CsvHelper.Configuration.MemberMap AsBool(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsBool(this CsvHelper.Configuration.MemberMap map, string[] additionalTrueValues) { }
        public static CsvHelper.Configuration.MemberMap AsDateTime(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsDecimal(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsDouble(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsEnum<TEnum>(this CsvHelper.Configuration.MemberMap map, TEnum defaultValue = default)
            where TEnum :  struct, System.IComparable, System.IFormattable { }
        public static CsvHelper.Configuration.MemberMap AsInt(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsLong(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableBool(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableBool(this CsvHelper.Configuration.MemberMap map, string[] additionalTrueValues, string[] additionalFalseValues) { }
        public static CsvHelper.Configuration.MemberMap AsNullableDateTime(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableDecimal(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableDouble(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableInt(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableLong(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableShort(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableString(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsNullableTimeSpan(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsShort(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsString(this CsvHelper.Configuration.MemberMap map) { }
        public static CsvHelper.Configuration.MemberMap AsTimeSpan(this CsvHelper.Configuration.MemberMap map) { }
    }
    public class NullableBooleanConverter : Orc.Csv.NullableTypeConverterBase<bool?>
    {
        public NullableBooleanConverter() { }
        public NullableBooleanConverter(string[]? trueValues, string[]? falseValues) { }
        public Orc.Csv.NullableBooleanConverter AddFalseValues(params string[] values) { }
        public Orc.Csv.NullableBooleanConverter AddTrueValues(params string[] values) { }
        protected override bool? ConvertStringToActualType(CsvHelper.IReaderRow? row, string text) { }
    }
    public class NullableDateTimeConverter : Orc.Csv.NullableTypeConverterBase<System.DateTime?>
    {
        public NullableDateTimeConverter() { }
        protected override System.DateTime? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableDecimalConverter : Orc.Csv.NullableTypeConverterBase<decimal?>
    {
        public NullableDecimalConverter() { }
        protected override decimal? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableDoubleConverter : Orc.Csv.NullableTypeConverterBase<double?>
    {
        public NullableDoubleConverter() { }
        protected override double? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableIntConverter : Orc.Csv.NullableTypeConverterBase<int?>
    {
        public NullableIntConverter() { }
        protected override int? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableLongConverter : Orc.Csv.NullableTypeConverterBase<long?>
    {
        public NullableLongConverter() { }
        protected override long? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableShortConverter : Orc.Csv.NullableTypeConverterBase<short?>
    {
        public NullableShortConverter() { }
        protected override short? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableStringConverter : Orc.Csv.NullableTypeConverterBase<string>
    {
        public NullableStringConverter() { }
        protected override string ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableTimeSpanConverter : Orc.Csv.NullableTypeConverterBase<System.TimeSpan?>
    {
        public NullableTimeSpanConverter() { }
        protected override System.TimeSpan? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public abstract class NullableTypeConverterBase<TNullable> : Orc.Csv.TypeConverterBase
    {
        protected NullableTypeConverterBase() { }
        public bool SupportNullText { get; set; }
        public override object? ConvertFromString(string? text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData? memberMapData) { }
        protected abstract TNullable? ConvertStringToActualType(CsvHelper.IReaderRow row, string text);
    }
    public class NullableUIntConverter : Orc.Csv.NullableTypeConverterBase<uint?>
    {
        public NullableUIntConverter() { }
        protected override uint? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableULongConverter : Orc.Csv.NullableTypeConverterBase<ulong?>
    {
        public NullableULongConverter() { }
        protected override ulong? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public class NullableUShortConverter : Orc.Csv.NullableTypeConverterBase<ushort?>
    {
        public NullableUShortConverter() { }
        protected override ushort? ConvertStringToActualType(CsvHelper.IReaderRow row, string text) { }
    }
    public static class StringExtensions
    {
        public static string ToCamelCase(this string input) { }
    }
    public abstract class TypeConverterBase : CsvHelper.TypeConversion.ITypeConverter
    {
        protected TypeConverterBase() { }
        public abstract object? ConvertFromString(string? text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData);
        public virtual string? ConvertToString(object? value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) { }
        protected System.Globalization.CultureInfo GetCultureInfo(CsvHelper.IReaderRow row) { }
        protected System.Globalization.CultureInfo GetCultureInfo(CsvHelper.IWriterRow row) { }
    }
}